#!/bin/sh
# yes the shell
# 2010-08-31 Kacper Wysocki <comotion@krutt.org> Initial version
#
# bottom up is better than top down

usage () {
   echo "Apply a gone configuration to the host"
   echo
   echo "usage: $0 [<options>] [<dir>, ...]"
   echo
   echo "Options:"
   echo "========"
   echo
   echo " -h, --help         Show this help text"
   echo
   echo " -q, --quite        Don't display any output"
   echo
   echo " -v, --verbose      Increase verbosity level"
   echo
   echo " -n, --no-check     Don't perform integrity checks"
   echo
   echo " -c, --check        Only check manifest, don't apply anything"
   echo
   echo " -g, --gen          Generate manifests for configuration"
   echo
   echo " -s, --sign-gpg     Sign manifests"
   echo
   echo " -m <method>, --method <method>"
   echo "                    Allow following methods"
   echo
   echo " -d, --dry-run      Show what will be done"
   echo
   echo " -t <file>, --target <file>"
   echo "                    The configuration target to use"
}

verbosity=3
action=apply
integrity=yes
sideeffects=yes
sign=no
methods='sha512sum sha384sum sha256sum sha1sum md5sum'
check_filename=manifest
fqdn=`hostname -f`
host=`hostname`
sync_agents="sync_modules sync_default"
args=""
target=target

do_args() {
   _method_buf=""
   while [ "$#" -gt 0 ]; do
      case "$1" in
         -h|--help)
            usage
            exit 1
            ;;
         -q|--quite)
            verbosity=0
            ;;
         -v|--verbose)
            verbosity=$(( $verbosity + 1 ))
            ;;
         -n|--no-check)
            integrity=no
            ;;
         -c|--check)
            action=integrity
            ;;
         -d|--dry-run)
            sideeffects=no
            ;;
         -g|--gen)
            action=generate
            ;;
         -s|--sign-gpg)
            sign=yes
            ;;
         -t|--target)
            shift
            target=$1
            ;;
         -*)
            echo "Unknown argument: $1" >&2
            exit 1
            ;;
         *)
            args="$args $1"
            ;;
      esac
      shift
   done
   [ ! -z "$_method_buf" ] && methods=$_method_buf
}

do_args $@

. ./functions

if [ ! -f $target ]; then
   echo "No such configuration target: '$target'" >&2
   exit 1
fi

. ./$target

[ ! -z "$SYNC_AGENTS" ] && sync_agents=$SYNC_AGENTS

log 4 "verbosity: $verbosity"
log 4 "dry-run: $sideeffects"
log 4 "action: $action"
log 4 "args: $args"
log 4 "sync-agents: $sync_agents"

#### some important functions ... the real red meat  ####

# do integrity check of all available methods.
# normally you're only using one method, the safest one you can afford
# contrived to allow you to decide which one(s) when generating the manifest(s)
# just by signing the manifests you want to use.
# someone might have snuck in a file that is missing in the manifest, so only use
# the manifest when applying files.

#
# XXX:
# Do we want to do this the hard way? This needs more than just a manifest:
# there is a multiuser use case for signing some files with a different key.
PASSED=
integrity_check () {
   if [ -z "`which gpg`" ]; then
      log 1 "gpg not available, can't guarantee integrity" >&2
      exit 4
   fi
   for key in $GPG_KEYS; do
      if [ $verbosity -lt 4 ]; then
          gpg --recv-key --quiet $key
      else
          gpg --recv-key $key
      fi
   done

   # Debian's coreutils are pre-historic, we can't use xargs `dirname`
   # cuss dirname old version of `dirname` only takes single arg
   manifests=$(find . -name 'manifest.*' -exec dirname '{}' \; | sort -u)

   foreach file_integrity $manifests

   log 4 "verifying manifest w/"$methods
   if [ -z "$PASSED" ]
   then
      log 1 "integrity check failed, integrity not available" >&2
      exit 3
   fi
}

file_integrity() {
   cd $1
   for method in $methods
   do
      file=$check_filename.$method
      if [ -f $file.gpg ]
      then
         # no sense checking if we're missing programs
         if [ -z "`which $method`" ]
         then
            log 1 "integrity check failed, method '$method' not available" >&2
            continue
         fi

         [ -f $file ] && mv $file $file.old
         gpg --yes --output $file -d $file.gpg || exit 7
         diff $file.old $file

         # ah the shittiness of bash exit codes
         if $method --quiet -c $file
         then
            # only need to check strongest method available
            # cryptographically useless to check weaker methods once we pass
            PASSED="$method"
            break
         else
            log 1 "$method: file $1/$file  " >&2
            exit 2
         fi
      fi
   done
   cd $OLDPWD
}

match_copy() {
# substitute installed copies for version controlled ones
   srcdir=$1
   shift
   check_methods=`shift`
   workdir=$PWD
   if [ -z "$check_methods" ]; then
      # no signature, no manifest
      FILES="`[ -d \"$srcdir/files\" ] && find "$srcdir/files" -type f | sort`"
   else
      # close a loophole by using files from the manifest only
      FILES=`cat manifest.$PASSED | cut -f 1 -d ' ' --complement | grep '^ \./files/' | sed 's/^ .\/files\///'`
      [ $! ] && exit 2 # quit on error
   fi

   #â™¯ why the hello not rsync?: b/c diff!
   # files should be relative paths
   for file in $FILES; do
      target=`echo $file | sed 's/.*\/files\//\//'`
      if [ ! -f $target ]
         then
         if [ -d `dirname $target` ]
         then
            if [ "yes" = $sideeffects ]; then
               log 3 "install target ($file -> $target)"
               cp -a $file $target
             else
               log 3 "install target ($file -> $target) [dry-run]"
             fi;
         else
            log 1 "not installing $file, no target dir"
         fi
         continue
      fi
      # XXX: remember attribs, uid/gid, extattr and selinux context
      # any and all uniquely definable characteristics of the file
      # problem: bash sux for this :-(
      #stati=`stat -t $file` # terse pickle
      #stato=`stat -t $target` # terse target
      #stata=( $stats ) # an array. arrays suck in dash
      statd=`stat -c '%a %u %g %C' $file 2>/dev/null`
      stats=`stat -c '%a %u %g %C' $target 2>/dev/null`
      attrs=`lsattr "$target" | awk '{print $1}'`

      # compare the pickle with the target
      if [ "$stats" != "$statd" ]; then
         # noncritical failure
         log 2 'pickle and target do not match, check lsattr and ownership'
      fi

      # diff is what's important
      if ! diff -bud $target $file || [ $? = 2 ]
      then
         if [ -z "$USER_CHOSE" ]
         then
            if [ "yes" = $sideeffects ]; then
                echo "$target $stats $attrs"
                echo " $file.$statd"
                echo "[] $target"
                echo "$file doesn't match local copy, (a)pply, (commit) or [SKIP]?"
                read choose
            else
               log 2 "$file doesn't match local copy [dry-run]"
               choose=ignore
            fi
         else
            choose=$USER_CHOSE
         fi

         case $choose in
            [aA])
               log 3 "overriding target ($file -> $target)"
               cp -a $file $target
               ;;

            commit)
               log 3 "commiting target ($target -> $file)"
               cp -a $target $file
               git diff $file
               git add $file
               git commit
               ;;

            ignore)
               ;;

            *)
               # skip
         esac
      fi
   done
   cd $workdir
}

generate_manifest() {
    catalogs=$@

	method=$(hd $methods)

    if [ $# -eq 0 ]; then
       catalogs=$(find . -type d -name 'files' -exec dirname '{}' \; | sort -r)
    fi

    for catalog in $catalogs; do
       if [ -d "$catalog" ]; then
          rm -f $catalog/manifest.$method
          log 2 "Generating $method manifest for $catalog"
          cd $catalog
          find . -type f |
             grep -Pv '^\./(inst|\.|manifest\.|(?:[^/]+/)+files)' | sort |
             xargs $method > $check_filename.$method
          if [ "yes" = "$sign" ]; then
             log 2 "Signing $catalog/$check_filename.$method.gpg"
             gpg --sign $check_filename.$method
          fi
          cd $OLDPWD
       else
          log 4 "Refusing to generate manifest for $catalog, not a directory"
       fi
    done
}

# off or on by default?
if [ "no" = $integrity ]; then
   check_methods=
else
   check_methods=$methods
fi

case $action in
   apply)
      # kick the script - basically what chef, slaughter and puppet does
      # execute all the modules and then sync any file non-module files
      [ "yes" = $integrity ] && integrity_check $args

      for agent in $sync_agents; do
         $agent
      done
      ;;
   integrity)
      integrity_check $args
      ;;
   generate)
      generate_manifest $args
      ;;
esac
